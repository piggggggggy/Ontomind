$schema: "https://json-schema.org/draft/2020-12/schema"
$title: "OntoMind OML Meta-Schema"
type: object
required: [version, namespaces]
properties:
  version:
    type: number
    enum: [0.1]
  namespaces:
    type: array
    items: { type: string }
  classes:
    type: array
    items:
      type: object
      required: [id, label, properties]
      properties:
        id:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        label: { type: string }
        description: { type: string }
        properties:
          type: array
          items:
            type: object
            required: [id, label, type]
            properties:
              id:
                type: object
                required: [ns, slug]
                properties:
                  ns: { type: string }
                  slug: { type: string }
                  version: { type: string }
              label: { type: string }
              type:
                oneOf:
                  - { type: string }
                  - { type: object, required: [enum], properties: { enum: { type: array, items: { type: string } } } }
                  - { type: object, required: [ref], properties: { ref: { type: object, required: [ns, slug], properties: { ns: { type: string }, slug: { type: string }, version: { type: string } } } } }
              required: { type: boolean }
              default: {}
        status: { type: string, enum: [draft, active, deprecated] }
  relationTypes:
    type: array
    items:
      type: object
      required: [id, label, domain, range]
      properties:
        id:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        label: { type: string }
        domain:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        range:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        cardinality: { type: string, enum: ["1-1","1-N","N-N"] }
        inverseOf:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        symmetric: { type: boolean }
        transitive: { type: boolean }
  intents:
    type: array
    items:
      type: object
      required: [id, label, input, output]
      properties:
        id:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        label: { type: string }
        input: { type: object }
        output: { type: object }
  contexts:
    type: array
    items:
      type: object
      required: [id, label]
      properties:
        id:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        label: { type: string }
        role: { type: string, enum: [me, lead, coach, analyst] }
        filters: { type: object }
  policies:
    type: array
    items:
      type: object
      required: [id, label]
      properties:
        id:
          type: object
          required: [ns, slug]
          properties:
            ns: { type: string }
            slug: { type: string }
            version: { type: string }
        label: { type: string }
        forbid: { type: array, items: { type: string } }
        prefer: { type: array, items: { type: string } }