import type { OMIR } from '@ontomind/core/types';
import { idToString } from '@ontomind/core/id';

export function buildTypeDeclarations(ir: OMIR): string {
  const lines: string[] = [];
  lines.push('// Auto-generated by @ontomind/codegen');
  lines.push('declare namespace OntoMind {');

  // Class 타입
  for (const c of ir.classes) {
    lines.push(`  interface ${c.id.slug[0].toUpperCase() + c.id.slug.slice(1)} {`);
    for (const p of c.properties ?? []) {
      const key = p.id.slug;
      const t = typeof p.type === 'string'
        ? (p.type === 'json' ? 'any' : (p.type === 'number' ? 'number' : 'string'))
        : ('enum' in p.type ? p.type.enum.map(s => `'${s}'`).join(' | ')
           : 'string');
      const opt = p.required ? '' : '?';
      lines.push(`    ${key}${opt}: ${t};`);
    }
    lines.push('  }');
  }

  // Intent I/O 타입
  for (const i of ir.intents) {
    const Name = i.id.slug[0].toUpperCase() + i.id.slug.slice(1);
    lines.push(`  namespace Intent_${Name} {`);
    lines.push('    interface Input {');
    for (const [k, hint] of Object.entries(i.input)) {
      const t = hint === 'json' ? 'any' : 'string';
      lines.push(`      ${k}: ${t};`);
    }
    lines.push('    }');
    lines.push('    interface Output {');
    for (const [k, hint] of Object.entries(i.output)) {
      const t = hint === 'json' ? 'any' : 'string';
      lines.push(`      ${k}: ${t};`);
    }
    lines.push('    }');
    lines.push('  }');
  }

  lines.push('}');
  return lines.join('\n');
}